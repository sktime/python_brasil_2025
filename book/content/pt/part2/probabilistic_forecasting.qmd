# Forecast probabil√≠stico


```{python}
# | echo: false
import warnings

warnings.filterwarnings("ignore")
```

```{python}
# | code-fold: true
import pandas as pd
import matplotlib.pyplot as plt

from sktime.utils.plotting import plot_series

```

```{python}
from tsbook.datasets.retail import SyntheticRetail
dataset = SyntheticRetail("panel")
y_train, X_train, y_test, X_test = dataset.load(
    "y_train", "X_train", "y_test", "X_test"
)
```



When forecasting for retail, we often interested in the uncertainty of the forecasts.

* Safety stock
* Predict probability of stockouts

```{python}
from sktime.registry import all_estimators

all_estimators("forecaster", filter_tags={"capability:pred_int": True}, as_dataframe=True)
```

```{python}
from sktime.forecasting.auto_reg import AutoREG
from sktime.transformations.series.difference import Differencer
from sktime.transformations.series.fourier import FourierFeatures
from sktime.forecasting.conformal import ConformalIntervals

fourier_features = FourierFeatures(
    sp_list=[365.25, 365.25 / 12], fourier_terms_list=[1, 1], freq="D"
)
auto_reg = fourier_features ** (Differencer() * AutoREG())


conformal_forecaster = ConformalIntervals(
    forecaster=auto_reg, initial_window=365 * 2, sample_frac=0.5
)
```

```{python}
parallel_config = {
        "backend:parallel": "joblib",
        "backend:parallel:params": {"backend": "loky", "n_jobs": -1},
    }

conformal_forecaster.set_config(
    **parallel_config
)

conformal_forecaster.fit(y_train)
```

```{python}

fh = y_test.index.get_level_values(-1).unique()
y_pred_int = conformal_forecaster.predict_interval(fh=fh, coverage=0.9)
```

```{python}
y_pred_int
```

```{python}
plot_series(
    y_train.loc[10], y_test.loc[10], labels=["Train", "Test"], title="Panel data",
    pred_interval=y_pred_int.loc[10], markers=[None]*2
)
```

There are negative values in the data, which do not make sense for our problem.

We can use a model that predicts a distribution that does not allow negative values, such as the **negative binomial distribution**.

```{python}
from prophetverse import Prophetverse, PiecewiseLinearTrend, MAPInferenceEngine


prophet = Prophetverse(
    trend=PiecewiseLinearTrend(changepoint_interval=365),
    likelihood="negbinomial",
    inference_engine=MAPInferenceEngine()
)

prophet.set_config(
    **parallel_config
)

prophet.fit(y_train, X_train)
```

```{python}
y_pred_int_prophetverse = prophet.predict_interval(fh=fh, X=X_test, coverage=0.9)
```

```{python}
plot_series(
    y_train.loc[10], y_test.loc[10], labels=["Train", "Test"], title="Panel data",
    pred_interval=y_pred_int_prophetverse.loc[10], markers=[None]*2
)

plt.show()
```

### Example of metric for probabilistic forecasting

```{python}
from sktime.performance_metrics.forecasting.probabilistic import PinballLoss

pinball_loss = PinballLoss()

pd.DataFrame(
    {"Conformal": pinball_loss(y_true=y_test, y_pred=y_pred_int),
     "Prophetverse Negbinomial": pinball_loss(y_true=y_test, y_pred=y_pred_int_prophetverse)},
    index=["Pinball Loss"]
)
```
